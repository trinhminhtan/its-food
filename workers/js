export default {
  async fetch(request, env) {
    const url = new URL(request.url);

    function sanitizeInput(input) {
      return input ? input.replace(/[<>"'(){}]/g, "") : "";
    }

    function toUpperCase(input) {
      return input ? input.toUpperCase() : "";
    }

    // Lấy giờ theo GMT+7
    function getVNTime() {
      return new Date(new Date().toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" }));
    }

    if (request.method === "POST" && url.pathname === "/api/orders") {
      try {
        const data = await request.json();
        if (!data.name || !data.drink || !data.quantity) {
          return new Response(JSON.stringify({ error: "Thiếu thông tin bắt buộc (tên, thức uống, số lượng)." }), {
            status: 400,
            headers: { "Content-Type": "application/json" },
          });
        }

        data.name = toUpperCase(sanitizeInput(data.name));
        data.drink = toUpperCase(sanitizeInput(data.drink));
        data.food = toUpperCase(data.food ? sanitizeInput(data.food) : "");
        data.quantity = parseInt(data.quantity, 10) || 1;
        data.size = toUpperCase(data.size ? sanitizeInput(data.size) : "");
        data.extra = data.extra || false;

        const today = getVNTime().toISOString().split("T")[0];

        let orders = {};
        try {
          const res = await env.ORDERS_BUCKET.get("orders.json");
          if (res) {
            orders = await res.json();
          } else {
            orders = {};
          }
        } catch (e) {
          orders = {};
        }

        orders[today] = orders[today] || [];
        orders[today] = orders[today].filter(order => order.name !== data.name);
        orders[today].push(data);

        await env.ORDERS_BUCKET.put("orders.json", JSON.stringify(orders));

        return new Response(JSON.stringify({ message: "Đã lưu đơn hàng!" }), {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type",
          },
        });
      } catch (error) {
        return new Response(JSON.stringify({ error: "Lỗi server: " + error.message }), {
          status: 500,
          headers: { "Content-Type": "application/json" },
        });
      }
    }

    if (request.method === "GET" && url.pathname.startsWith("/api/orders")) {
      try {
        const res = await env.ORDERS_BUCKET.get("orders.json");
        const orders = res ? await res.json() : {};

        return new Response(JSON.stringify(orders), {
          headers: {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*",
          },
        });
      } catch (error) {
        return new Response(JSON.stringify({ error: "Lỗi server khi lấy data: " + error.message }), {
          status: 500,
          headers: { "Content-Type": "application/json" },
        });
      }
    }

    if (request.method === "OPTIONS") {
      return new Response(null, {
        status: 204,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
        },
      });
    }

    return new Response("Not Found", { status: 404 });
  }
};
